{"ast":null,"code":"useEffect(() => {\n  const codeReader = new BrowserMultiFormatReader();\n  const videoElement = document.getElementById('video');\n  const startScanning = async () => {\n    try {\n      await codeReader.decodeFromVideoDevice(null, videoElement, async (result, error) => {\n        if (isProcessing) return; // Si ya se está procesando un escaneo, no hacer nada\n\n        if (error) {\n          if (error.name !== 'NotFoundException') {\n            console.error('Error al leer el código:', error.message || error);\n          }\n          return;\n        }\n        if (result) {\n          setIsProcessing(true);\n          const parsedData = parseData(result.getText());\n          setDecodedInfo(parsedData);\n          if (!parsedData.numDocumento) {\n            setErrorMessage('Datos escaneados inválidos.');\n            setIsProcessing(false);\n            return;\n          }\n          try {\n            // Validar el documento\n            const validateResponse = await axios.post(`/api/validate/${eventId}`, {\n              dni: parsedData.numDocumento\n            });\n            if (validateResponse.data.match) {\n              setDocumentMatch(true);\n              const {\n                user\n              } = validateResponse.data;\n              setUserInfo({\n                nombre: user.usuario,\n                rol: user.rol,\n                color: user.color\n              });\n\n              // Registrar entrada o salida\n              await axios.post(`/api/log/${eventId}`, {\n                userId: user.id_usuario,\n                estado: isEntry ? 1 : 0 // Cambiar a 1 para entrada y 0 para salida\n              });\n              stopCamera();\n\n              // Esperar 3 segundos antes de habilitar el siguiente escaneo\n              setTimeout(() => {\n                setIsProcessing(false);\n                setDecodedInfo(null); // Limpiar datos del escaneo anterior\n                setDocumentMatch(false);\n                setErrorMessage('');\n              }, 3000);\n            } else {\n              setDocumentMatch(false);\n              setUserInfo({\n                nombre: '',\n                rol: '',\n                color: ''\n              });\n            }\n            setIsCameraVisible(false);\n          } catch (error) {\n            setErrorMessage('Error al conectar con el servidor.');\n          } finally {\n            setIsProcessing(false);\n          }\n        }\n      });\n    } catch (error) {\n      setErrorMessage('No se pudo acceder a la cámara. Verifica los permisos.');\n    }\n  };\n  const stopCamera = () => {\n    codeReader.reset();\n  };\n  if (isCameraVisible) {\n    startScanning();\n  }\n  return () => {\n    stopCamera();\n  };\n}, [eventId, isCameraVisible, isProcessing, parseData, isEntry]);","map":{"version":3,"names":["useEffect","codeReader","BrowserMultiFormatReader","videoElement","document","getElementById","startScanning","decodeFromVideoDevice","result","error","isProcessing","name","console","message","setIsProcessing","parsedData","parseData","getText","setDecodedInfo","numDocumento","setErrorMessage","validateResponse","axios","post","eventId","dni","data","match","setDocumentMatch","user","setUserInfo","nombre","usuario","rol","color","userId","id_usuario","estado","isEntry","stopCamera","setTimeout","setIsCameraVisible","reset","isCameraVisible"],"sources":["C:/Users/Administrador/source/repos/eventos_sfco/frontend/src/components/Scanner.js"],"sourcesContent":["useEffect(() => {\r\n    const codeReader = new BrowserMultiFormatReader();\r\n    const videoElement = document.getElementById('video');\r\n\r\n    const startScanning = async () => {\r\n        try {\r\n            await codeReader.decodeFromVideoDevice(null, videoElement, async (result, error) => {\r\n                if (isProcessing) return; // Si ya se está procesando un escaneo, no hacer nada\r\n\r\n                if (error) {\r\n                    if (error.name !== 'NotFoundException') {\r\n                        console.error('Error al leer el código:', error.message || error);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                if (result) {\r\n                    setIsProcessing(true);\r\n                    const parsedData = parseData(result.getText());\r\n                    setDecodedInfo(parsedData);\r\n\r\n                    if (!parsedData.numDocumento) {\r\n                        setErrorMessage('Datos escaneados inválidos.');\r\n                        setIsProcessing(false);\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        // Validar el documento\r\n                        const validateResponse = await axios.post(`/api/validate/${eventId}`, {\r\n                            dni: parsedData.numDocumento,\r\n                        });\r\n\r\n                        if (validateResponse.data.match) {\r\n                            setDocumentMatch(true);\r\n                            const { user } = validateResponse.data;\r\n                            setUserInfo({\r\n                                nombre: user.usuario,\r\n                                rol: user.rol,\r\n                                color: user.color,\r\n                            });\r\n\r\n                            // Registrar entrada o salida\r\n                            await axios.post(`/api/log/${eventId}`, {\r\n                                userId: user.id_usuario,\r\n                                estado: isEntry ? 1 : 0, // Cambiar a 1 para entrada y 0 para salida\r\n                            });\r\n\r\n                            stopCamera();\r\n\r\n                            // Esperar 3 segundos antes de habilitar el siguiente escaneo\r\n                            setTimeout(() => {\r\n                                setIsProcessing(false);\r\n                                setDecodedInfo(null); // Limpiar datos del escaneo anterior\r\n                                setDocumentMatch(false);\r\n                                setErrorMessage('');\r\n                            }, 3000);\r\n                        } else {\r\n                            setDocumentMatch(false);\r\n                            setUserInfo({ nombre: '', rol: '', color: '' });\r\n                        }\r\n\r\n                        setIsCameraVisible(false);\r\n                    } catch (error) {\r\n                        setErrorMessage('Error al conectar con el servidor.');\r\n                    } finally {\r\n                        setIsProcessing(false);\r\n                    }\r\n                }\r\n            });\r\n        } catch (error) {\r\n            setErrorMessage('No se pudo acceder a la cámara. Verifica los permisos.');\r\n        }\r\n    };\r\n\r\n    const stopCamera = () => {\r\n        codeReader.reset();\r\n    };\r\n\r\n    if (isCameraVisible) {\r\n        startScanning();\r\n    }\r\n\r\n    return () => {\r\n        stopCamera();\r\n    };\r\n}, [eventId, isCameraVisible, isProcessing, parseData, isEntry]);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}