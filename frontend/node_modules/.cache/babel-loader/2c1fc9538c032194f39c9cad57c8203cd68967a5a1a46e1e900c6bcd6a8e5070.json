{"ast":null,"code":"useEffect(() => {\n  const codeReader = new BrowserMultiFormatReader();\n  const videoElement = document.getElementById('video');\n  const startScanning = async () => {\n    try {\n      if (isProcessing) return;\n      await codeReader.decodeFromVideoDevice(null, videoElement, async (result, error) => {\n        if (isProcessing) return;\n        if (error) {\n          if (error.name !== 'NotFoundException') {\n            console.error('Error al leer el cÃ³digo:', error.message || error);\n          }\n          return;\n        }\n        if (result) {\n          setIsProcessing(true);\n          const parsedData = parseData(result.getText());\n          setDecodedInfo(parsedData);\n          if (!parsedData.numDocumento) {\n            setErrorMessage('Datos escaneados invÃ¡lidos.');\n            setIsProcessing(false);\n            return;\n          }\n          try {\n            const validateResponse = await axios.post(`/api/validate/${eventId}`, {\n              dni: parsedData.numDocumento\n            });\n            if (validateResponse.data.match) {\n              setDocumentMatch(true);\n              const {\n                user\n              } = validateResponse.data;\n              setUserInfo({\n                nombre: user.usuario,\n                rol: user.rol,\n                color: user.color\n              });\n              await sendLogRequest(eventId, user.id_usuario, isEntry ? 1 : 0);\n            } else {\n              setDocumentMatch(false);\n              setUserInfo({\n                nombre: '',\n                rol: '',\n                color: ''\n              });\n            }\n          } catch (error) {\n            setErrorMessage('Error al conectar con el servidor.');\n          } finally {\n            setIsProcessing(false);\n          }\n          setIsCameraVisible(false);\n          codeReader.reset();\n        }\n      });\n    } catch (error) {\n      setErrorMessage('No se pudo acceder a la cÃ¡mara. Verifica los permisos.');\n    }\n  };\n  if (isCameraVisible) {\n    startScanning();\n  }\n  return () => {\n    codeReader.reset();\n  };\n}, [eventId, isCameraVisible, parseData, isEntry]); // âœ… Agregamos `isEntry` para que se reinicie correctamente\n\n// ðŸ”„ Nuevo useEffect para resetear la cÃ¡mara cuando cambia Entrada/Salida\nuseEffect(() => {\n  setIsCameraVisible(true); // ðŸ”„ Activa la cÃ¡mara de nuevo\n  setDecodedInfo(null);\n  setDocumentMatch(false);\n  setErrorMessage('');\n  setUserInfo({\n    nombre: '',\n    rol: '',\n    color: ''\n  });\n}, [isEntry]); // âœ… Se ejecuta cada vez que se cambia Entrada/Salida\n\n// âœ… FunciÃ³n corregida para cambiar entre Entrada y Salida\nconst handleToggleEntry = value => {\n  setIsEntry(value);\n};","map":{"version":3,"names":["useEffect","codeReader","BrowserMultiFormatReader","videoElement","document","getElementById","startScanning","isProcessing","decodeFromVideoDevice","result","error","name","console","message","setIsProcessing","parsedData","parseData","getText","setDecodedInfo","numDocumento","setErrorMessage","validateResponse","axios","post","eventId","dni","data","match","setDocumentMatch","user","setUserInfo","nombre","usuario","rol","color","sendLogRequest","id_usuario","isEntry","setIsCameraVisible","reset","isCameraVisible","handleToggleEntry","value","setIsEntry"],"sources":["C:/Users/Administrador/source/repos/eventos_sfco/frontend/src/components/Scanner.js"],"sourcesContent":["useEffect(() => {\r\n    const codeReader = new BrowserMultiFormatReader();\r\n    const videoElement = document.getElementById('video');\r\n\r\n    const startScanning = async () => {\r\n        try {\r\n            if (isProcessing) return;\r\n\r\n            await codeReader.decodeFromVideoDevice(null, videoElement, async (result, error) => {\r\n                if (isProcessing) return;\r\n\r\n                if (error) {\r\n                    if (error.name !== 'NotFoundException') {\r\n                        console.error('Error al leer el cÃ³digo:', error.message || error);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                if (result) {\r\n                    setIsProcessing(true);\r\n                    const parsedData = parseData(result.getText());\r\n                    setDecodedInfo(parsedData);\r\n\r\n                    if (!parsedData.numDocumento) {\r\n                        setErrorMessage('Datos escaneados invÃ¡lidos.');\r\n                        setIsProcessing(false);\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        const validateResponse = await axios.post(`/api/validate/${eventId}`, {\r\n                            dni: parsedData.numDocumento,\r\n                        });\r\n\r\n                        if (validateResponse.data.match) {\r\n                            setDocumentMatch(true);\r\n                            const { user } = validateResponse.data;\r\n                            setUserInfo({ nombre: user.usuario, rol: user.rol, color: user.color });\r\n\r\n                            await sendLogRequest(eventId, user.id_usuario, isEntry ? 1 : 0);\r\n                        } else {\r\n                            setDocumentMatch(false);\r\n                            setUserInfo({ nombre: '', rol: '', color: '' });\r\n                        }\r\n                    } catch (error) {\r\n                        setErrorMessage('Error al conectar con el servidor.');\r\n                    } finally {\r\n                        setIsProcessing(false);\r\n                    }\r\n\r\n                    setIsCameraVisible(false);\r\n                    codeReader.reset();\r\n                }\r\n            });\r\n        } catch (error) {\r\n            setErrorMessage('No se pudo acceder a la cÃ¡mara. Verifica los permisos.');\r\n        }\r\n    };\r\n\r\n    if (isCameraVisible) {\r\n        startScanning();\r\n    }\r\n\r\n    return () => {\r\n        codeReader.reset();\r\n    };\r\n}, [eventId, isCameraVisible, parseData, isEntry]);  // âœ… Agregamos `isEntry` para que se reinicie correctamente\r\n\r\n// ðŸ”„ Nuevo useEffect para resetear la cÃ¡mara cuando cambia Entrada/Salida\r\nuseEffect(() => {\r\n    setIsCameraVisible(true);  // ðŸ”„ Activa la cÃ¡mara de nuevo\r\n    setDecodedInfo(null);\r\n    setDocumentMatch(false);\r\n    setErrorMessage('');\r\n    setUserInfo({ nombre: '', rol: '', color: '' });\r\n}, [isEntry]);  // âœ… Se ejecuta cada vez que se cambia Entrada/Salida\r\n\r\n// âœ… FunciÃ³n corregida para cambiar entre Entrada y Salida\r\nconst handleToggleEntry = (value) => {\r\n    setIsEntry(value);\r\n};\r\n"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACZ,MAAMC,UAAU,GAAG,IAAIC,wBAAwB,CAAC,CAAC;EACjD,MAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;EAErD,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,IAAIC,YAAY,EAAE;MAElB,MAAMN,UAAU,CAACO,qBAAqB,CAAC,IAAI,EAAEL,YAAY,EAAE,OAAOM,MAAM,EAAEC,KAAK,KAAK;QAChF,IAAIH,YAAY,EAAE;QAElB,IAAIG,KAAK,EAAE;UACP,IAAIA,KAAK,CAACC,IAAI,KAAK,mBAAmB,EAAE;YACpCC,OAAO,CAACF,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACG,OAAO,IAAIH,KAAK,CAAC;UACrE;UACA;QACJ;QAEA,IAAID,MAAM,EAAE;UACRK,eAAe,CAAC,IAAI,CAAC;UACrB,MAAMC,UAAU,GAAGC,SAAS,CAACP,MAAM,CAACQ,OAAO,CAAC,CAAC,CAAC;UAC9CC,cAAc,CAACH,UAAU,CAAC;UAE1B,IAAI,CAACA,UAAU,CAACI,YAAY,EAAE;YAC1BC,eAAe,CAAC,6BAA6B,CAAC;YAC9CN,eAAe,CAAC,KAAK,CAAC;YACtB;UACJ;UAEA,IAAI;YACA,MAAMO,gBAAgB,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,iBAAiBC,OAAO,EAAE,EAAE;cAClEC,GAAG,EAAEV,UAAU,CAACI;YACpB,CAAC,CAAC;YAEF,IAAIE,gBAAgB,CAACK,IAAI,CAACC,KAAK,EAAE;cAC7BC,gBAAgB,CAAC,IAAI,CAAC;cACtB,MAAM;gBAAEC;cAAK,CAAC,GAAGR,gBAAgB,CAACK,IAAI;cACtCI,WAAW,CAAC;gBAAEC,MAAM,EAAEF,IAAI,CAACG,OAAO;gBAAEC,GAAG,EAAEJ,IAAI,CAACI,GAAG;gBAAEC,KAAK,EAAEL,IAAI,CAACK;cAAM,CAAC,CAAC;cAEvE,MAAMC,cAAc,CAACX,OAAO,EAAEK,IAAI,CAACO,UAAU,EAAEC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;YACnE,CAAC,MAAM;cACHT,gBAAgB,CAAC,KAAK,CAAC;cACvBE,WAAW,CAAC;gBAAEC,MAAM,EAAE,EAAE;gBAAEE,GAAG,EAAE,EAAE;gBAAEC,KAAK,EAAE;cAAG,CAAC,CAAC;YACnD;UACJ,CAAC,CAAC,OAAOxB,KAAK,EAAE;YACZU,eAAe,CAAC,oCAAoC,CAAC;UACzD,CAAC,SAAS;YACNN,eAAe,CAAC,KAAK,CAAC;UAC1B;UAEAwB,kBAAkB,CAAC,KAAK,CAAC;UACzBrC,UAAU,CAACsC,KAAK,CAAC,CAAC;QACtB;MACJ,CAAC,CAAC;IACN,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACZU,eAAe,CAAC,wDAAwD,CAAC;IAC7E;EACJ,CAAC;EAED,IAAIoB,eAAe,EAAE;IACjBlC,aAAa,CAAC,CAAC;EACnB;EAEA,OAAO,MAAM;IACTL,UAAU,CAACsC,KAAK,CAAC,CAAC;EACtB,CAAC;AACL,CAAC,EAAE,CAACf,OAAO,EAAEgB,eAAe,EAAExB,SAAS,EAAEqB,OAAO,CAAC,CAAC,CAAC,CAAE;;AAErD;AACArC,SAAS,CAAC,MAAM;EACZsC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAE;EAC3BpB,cAAc,CAAC,IAAI,CAAC;EACpBU,gBAAgB,CAAC,KAAK,CAAC;EACvBR,eAAe,CAAC,EAAE,CAAC;EACnBU,WAAW,CAAC;IAAEC,MAAM,EAAE,EAAE;IAAEE,GAAG,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;AACnD,CAAC,EAAE,CAACG,OAAO,CAAC,CAAC,CAAC,CAAE;;AAEhB;AACA,MAAMI,iBAAiB,GAAIC,KAAK,IAAK;EACjCC,UAAU,CAACD,KAAK,CAAC;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}